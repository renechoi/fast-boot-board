debug: false
management:
  endpoints:
    web:
      exposure:
        include: "*"  # 액츄에이터 기능 보도록 하는 설정

logging:
  level:
    fast.bootboard : debug
    org.springframework.web.servlet: debug
    org.hibernate.type.descriptor.sql.BasicBinder: trace

spring:
  application:
    name: fast-board
  cloud:
    vault:
      scheme: http
      authentication: TOKEN
      token: hvs.82IU6c8G8FIZtu6lDv1UODmG
#  config.import: vault://
  datasource:
    url: ${LOCAL_DB_URL} # jdbc:postgresql://localhost:5432/fastboard
    username: ${LOCAL_DB_USERNAME} # Rene
    password: ${LOCAL_DB_PASSWORD} # 1234
#    url: ${LOCAL_DB_URL} # jdbc:mysql://localhost:3306/fast_boot_board
#    username: ${LOCAL_DB_USERNAME} # rene
#    password: ${LOCAL_DB_PASSWORD} # itiswhatitis
#    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    defer-datasource-initialization: true   # data.sql => 초기값으로 실행되는 data들 실행되도록
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        format_sql: true
        default_batch_fetch_size: 100
    open-in-view: false
  h2:
    console:
      enabled: false
  sql:
    init:
      mode: always        # 초기로 설정하는 data 언제 하는지
  data:
    rest:
      base-path: /api
      detection-strategy: annotated
  thymeleaf3:
    decoupled-logic: true
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_OAUTH_CLIENT_ID} # 96d45143d67b5449cb81a098cc354c6d
            client-secret: ${KAKAO_OAUTH_CLIENT_SECRET} # W41QQl3dORFdBSNUyR46No2boTwPWiZn
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/kakao"
            client-authentication-method: POST
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id







---
#spring:
#  config:
#    activate:
#      on-profile: testdb
#  datasource:
#    driver-class-name: org.h2.Driver
#    url: jdbc:h2:mem:board;mode=mysql
#  sql:
#    init:
#      mode: always

spring:
  config:
    activate:
      on-profile: test
  datasource:
    url: jdbc:h2:mem:testdb

---
spring:
  config:
    activate:
      on-profile: heroku
  datasource:
    url: ${JAWSDB_URL}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: create
  sql:
    init:
      mode: always
